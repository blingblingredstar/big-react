import type {
  ReactElement,
  ReactKey,
  ReactProps,
  ReactRef,
} from 'shared/ReactTypes';
import { FunctionComponent, HostComponent, WorkTag } from './workTags';
import { FiberFlags, NoFlags } from './fiberFlags';
import { Container } from 'hostConfig';
import { UpdateQueue } from './updateQueue';

export class FiberNode {
  tag: WorkTag;
  key: ReactKey;
  /**
   * For a host component, this is the DOM node.
   */
  stateNode: Container | null;
  /**
   * The type of the component (class, function, host, etc).
   * For function components, this is a reference to the function.
   */
  type: any;
  /**
   * The fiber to return to after finishing processing this one.
   * This is effectively the parent fiber.
   */
  return: FiberNode | null;
  /**
   * The next fiber to process for the current parent.
   * This is effectively the sibling fiber.
   */
  sibling: FiberNode | null;
  /**
   * The first child fiber.
   * This is effectively the child fiber.
   */
  child: FiberNode | null;
  /**
   * The index of the fiber in the list of children of its parent fiber.
   * This is used to quickly determine the position of the fiber in the list.
   */
  index: number;
  /**
   * A reference to the backing instance (i.e. the instance of a class component).
   * This is used to invoke methods on the instance.
   */
  ref: ReactRef;
  /**
   * The props passed to the component.
   */
  pendingProps: ReactProps;
  /**
   * The memoized props of the component.
   * This is used to determine if the component should update.
   * Generated by the reconciler.
   */
  memoizedProps: ReactProps | null;
  /**
   * The state of the component.
   */
  memoizedState: any | null;
  /**
   * The alternate fiber used to determine what has changed.
   * This is used to determine what has changed in the tree.
   * Generated by the reconciler.
   * There are two fibers for each component: the current fiber and the work-in-progress fiber.
   * The current fiber is the fiber that is currently being rendered.
   * The work-in-progress fiber is the fiber that is being built.
   * This is to store the alternate fiber of the current fiber.
   * If the current fiber is the work-in-progress fiber, then the alternate fiber is the current fiber.
   */
  alternate: FiberNode | null;
  /**
   * Side-effects to perform after the component has been rendered.
   */
  flags: FiberFlags;
  /**
   * Flags for the sub-tree.
   * This is used to determine what has changed in the sub-tree.
   */
  subTreeFlags: FiberFlags;

  updateQueue: UpdateQueue<any> | null;

  constructor(tag: WorkTag, pendingProps: ReactProps, key: ReactKey) {
    this.tag = tag;
    this.key = key;

    this.stateNode = null;
    this.type = null;

    // Below properties build the tree structure
    this.return = null;
    this.sibling = null;
    this.child = null;
    this.index = 0;

    this.ref = null;

    // Below properties belong to the work unit
    this.pendingProps = pendingProps;
    this.memoizedProps = null;
    this.memoizedState = null;
    this.updateQueue = null;

    this.alternate = null;
    this.flags = NoFlags;
    this.subTreeFlags = NoFlags;
  }
}

export class FiberRootNode {
  /**
   * The root element passed to ReactDOM.createRoot().
   * This is the root of the tree.
   */
  container: Container;
  /**
   * The current fiber that is being rendered.
   * This is effectively the host root fiber.
   */
  current: FiberNode;
  /**
   * The work-in-progress fiber that is being built.
   */
  finishedWork: FiberNode | null;

  constructor(container: Container, hostRootFiber: FiberNode) {
    this.container = container;
    this.current = hostRootFiber;
    hostRootFiber.stateNode = this;
    this.finishedWork = null;
  }
}

export const createWorkInProgress = (
  current: FiberNode,
  pendingProps: ReactProps,
): FiberNode => {
  let wip = current.alternate;

  if (wip === null) {
    // If there is no alternate, this is the first render.
    wip = new FiberNode(current.tag, pendingProps, current.key);
    wip.stateNode = current.stateNode;

    wip.alternate = current;
    current.alternate = wip;
  } else {
    // If there is an alternate, reuse the node by cloning it.
    wip.pendingProps = pendingProps;
    wip.flags = NoFlags;
    wip.subTreeFlags = NoFlags;
  }
  wip.type = current.type;
  wip.updateQueue = current.updateQueue;
  wip.child = current.child;
  wip.memoizedProps = current.memoizedProps;
  wip.memoizedState = current.memoizedState;

  return wip;
};

export const createFiberFromElement = (element: ReactElement): FiberNode => {
  const { type, key, props } = element;
  let fiberTag: WorkTag = FunctionComponent;
  if (typeof type === 'string') {
    // For jsx element like <div />, the type is string
    fiberTag = HostComponent;
  } else if (typeof type !== 'function') {
    if (__DEV__) {
      console.warn('Unsupported element type.', type);
    }
  }

  const fiber = new FiberNode(fiberTag, props, key);
  fiber.type = type;
  return fiber;
};
